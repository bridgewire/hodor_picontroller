#! /bin/sh
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Foo Bar <foobar@baz.org>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="Hodor Communicator to Slack"
NAME=hodor_slacker
SCRIPTNAME=/etc/init.d/$NAME

. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	bash /home/pi/run_hodor_slacker.sh &
	echo "$!" > /home/pi/pid_run_hodor_slacker.pid
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	# start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
	# 	|| return 1
	# start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
	# 	$DAEMON_ARGS \
	# 	|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	if [ -f /home/pi/pid_run_hodor_slacker.pid ] ; then
		egrep -q '[0-9]+' /home/pi/pid_run_hodor_slacker.pid
		if [ $? -eq 0 ] ; then
			kill -TERM  `cat /home/pi/pid_run_hodor_slacker.pid`
		fi
	fi
	ps auxww | egrep 'hodor_slacker.py' | grep -v grep | awk '{print $2}' | xargs kill
	rm -f /home/pi/pid_run_hodor_slacker.pid
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	# start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	# RETVAL="$?"
	# [ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	# start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	# [ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	# rm -f $PIDFILE
	# return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	do_stop
	do_start
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	# start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	# return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && echo "Starting $DESC" "$NAME"
	do_start
	# case "$?" in
	# 	0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	# 	2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	# esac
	;;
  stop)
	[ "$VERBOSE" != no ] && echo "Stopping $DESC" "$NAME"
	do_stop
	# case "$?" in
	# 	0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	# 	2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	# esac
	;;
  status)
	# status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	[ "$VERBOSE" != no ] && echo "Restarting $DESC" "$NAME"
	do_stop
	do_start
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac
